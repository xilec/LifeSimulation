using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using LifeSimulation;
using LifeSimulation.Training;

using NUnit.Framework;
using FluentAssert;

namespace LifeSimulation.Tests
{
    using AgentType;
    using Direction;

    public class Perception
    {
        [Test]
        public EmptyEnvironment() : void
        {
            def expectedInputs = TrainingCamp.CreateInputs();

            def landscape = Landscape.CreateTest();

            def agent = Agent(Herbivore);
            agent.Location = Location(10, 10);
            landscape.Agents[0] = agent;
            landscape.SetAgentInPosition(agent);

            landscape.UpdatePerception(agent);

            _ = agent.Inputs.ShouldBeEqualTo(expectedInputs);
        }

        [Test]
        public AgentOnFront() : void
        {
            def expectedCarnivoreInputs = TrainingCamp.CreateInputs(herbivoresOnFront = 1);
            def expectedHerbivoreInputs = TrainingCamp.CreateInputs(carnivoresOnFront = 1);

            def landscape = Landscape.CreateTest();

            def herbivore = Agent(Herbivore);
            herbivore.Direction = East;
            herbivore.Location = Location(0, 4);
            landscape.Agents[0] = herbivore;
            landscape.SetAgentInPosition(herbivore);

            def carnivore = Agent(Carnivore);
            carnivore.Direction = West;
            carnivore.Location = Location(2, 2);
            landscape.Agents[1] = carnivore;
            landscape.SetAgentInPosition(carnivore);

            landscape.UpdatePerception(herbivore);
            landscape.UpdatePerception(carnivore);

            herbivore.Inputs.ShouldBeEqualTo(expectedHerbivoreInputs);
            carnivore.Inputs.ShouldBeEqualTo(expectedCarnivoreInputs);
        }
        
        [Test]
        public PlantOnFront() : void
        {
            def expectedCarnivoreInputs = TrainingCamp.CreateInputs(plantsOnProximity = 1);
            
            def landscape = Landscape.CreateTest();
            
            def carnivore = Agent(Carnivore);
            carnivore.Direction = East;
            carnivore.Location = Location(0, 2);
            landscape.Agents[0] = carnivore;
            landscape.SetAgentInPosition(carnivore);
            
            
            def plant = Agent.CreatePlant();
            plant.Location = Location(1, 3);
            landscape.Plants[0] = plant;
            landscape.SetPlantToPosition(plant);
            
            landscape.UpdatePerception(carnivore);
            
            _ = carnivore.Inputs.ShouldBeEqualTo(expectedCarnivoreInputs);
        }
    }
}
