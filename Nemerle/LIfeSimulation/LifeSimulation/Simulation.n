using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;

namespace LifeSimulation
{
    using AgentType;
    using Rand;
    using Landscape;
    
    public class Simulation
    {
        public MaxSteps = 2000;

        public ReproduceEnergyFactor = 0.8;
        
        public Landscape : Landscape = Landscape.Create();
        
        public ColumnsCount : int
        {
            get
            {
                Landscape.GetColumnsCount();
            }
        }
        
        public RowsCount : int
        {
            get
            {
                Landscape.GetRowsCount();
            }
        }

        public Simulate() : void
        {
            DoAgentsAction(SimulateAgent);
        }
        
        private SimulateAgent(agent : Agent) : void
        {
            EstimateAgentsState(agent);

            UpdateAgentsState(agent);
        }
        
        private DoAgentsAction(action : Action[Agent]) : void
        {
            def agentTypes = array[Herbivore, Carnivore];
            foreach (type in agentTypes)
            {
                for (mutable i = 0; i < Landscape.Agents.Length; i++)
                {
                    def agent = Landscape.Agents[i];
                    when(agent == null)
                    {
                        continue;
                    }

                    when(agent.Type == type)
                    {
                        action(agent);
                    }
                }
            }            
        }
        
        public EstimateState() : void
        {
            DoAgentsAction(EstimateAgentsState);
        }

        public UpdateState() : void
        {
            DoAgentsAction(UpdateAgentsState);
        }
        
        private EstimateAgentsState(agent : Agent) : void
        {
            // Вычисление значений на входе в нейтронную сеть
            Landscape.UpdatePerception(agent);

            // Выполнение выбранного действия
            agent.MakeDecision();
        }

        private UpdateAgentsState(agent : Agent) : void 
        {
            match(agent.Action)
            {
                | TurnLeft  => agent.Turn();
                | TurnRight => agent.Turn();
                | Move => Landscape.Move(agent);
                | Eat => Eat(agent);
                | _ => throw ArgumentOutOfRangeException()
            }

            // Вычитаем "потраченную" энергию
            agent.Energy -= if(agent.Type == AgentType.Herbivore) { 2 } else { 1 };

            // Если агент имеет достаточно энергии для размножения, то позволяем ему сделать это
            when (agent.Energy > (ReproduceEnergyFactor*Agent.MaxEnergy))
            {
                Landscape.ReproduceAgent(agent);
            }

            // Если энергия агента меньше или равна нулю - агент умирает
            // В противом случае проверяем, чне является ли этот агент самым старым
            if (agent.Energy <= 0)
            {
                Landscape.KillAgent(agent);
            }
            else
            {
                agent.Age++;
                Landscape.Statistics.CheckMaxGen(agent);
            }
        }
        
        private Eat(agent : Agent) : void
        {            
            def (isObjectChoosen, ox, oy) = Landscape.ChooseObject(agent);
            
            when(!isObjectChoosen)
            {
                return;
            }
            
            match(agent.Type)
            {
                | Herbivore => {
                    def findedPlant = Landscape.FindPlant(ox, oy);
                    
                    when(findedPlant != null)
                    {
                        agent.Eat();
                        
                        Landscape.RemovePlant(findedPlant);
                        Landscape.AddPlant(findedPlant);
                    }
                };
                | Carnivore => {
                    def findedHerbivore = Landscape.FindHerbivore(ox, oy);
                    
                    when(findedHerbivore != null)
                    {
                        agent.Eat();
                        
                        Landscape.KillAgent(findedHerbivore);
                    }
                    
                };
                | _ => throw ArgumentOutOfRangeException();
            }
        }
    }
}
